name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Clona el repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configura .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 3Ô∏è‚É£ Restaura dependencias backend
      - name: Restore backend dependencies
        run: dotnet restore ./backend/Web.api/Web.api.csproj

      # 4Ô∏è‚É£ Compila backend
      - name: Build backend
        run: dotnet build ./backend/Web.api/Web.api.csproj --configuration Release --no-restore

      # 5Ô∏è‚É£ Ejecuta tests del backend
      - name: Run backend tests
        run: dotnet test ./backend --no-build --verbosity normal

      # 6Ô∏è‚É£ Instala dependencias frontend
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      # 7Ô∏è‚É£ (Opcional) Lint ‚Äî actualmente comentado
      # - name: Run ESLint
      #   working-directory: ./frontend
      #   run: npm run lint

      # 8Ô∏è‚É£ Build frontend
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # 9Ô∏è‚É£ Copia el build del frontend dentro del backend (para servirlo con .NET si aplicara)
      # ‚ö†Ô∏è Tu frontend corre separado, as√≠ que esto se mantiene solo como ejemplo
      # - name: Copy frontend build to backend publish
      #   run: |
      #     mkdir -p ./publish/backend/wwwroot
      #     cp -r frontend/build/* ./publish/backend/wwwroot/

      # üîü Publica backend (para empaquetar artefacto final)
      - name: Publish backend
        run: dotnet publish ./backend/Web.api/Web.api.csproj -c Release -o ./publish/backend

      # 1Ô∏è‚É£1Ô∏è‚É£ Guarda artefactos (√∫til para debugging o descargar)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-artifacts
          path: ./publish

  # üöÄ 2Ô∏è‚É£ Job opcional: Deploy por FTP (solo corre en PR a main o manualmente)
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts
          path: ./publish

      # üíæ Despliegue FTP (descoment√° para usarlo)
      # - name: Deploy via FTP
      #   uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      #   with:
      #     server: ${{ secrets.FTP_HOST }}
      #     username: ${{ secrets.FTP_USER }}
      #     password: ${{ secrets.FTP_PASS }}
      #     local-dir: ./publish/backend
      #     server-dir: /path/to/your/site/
